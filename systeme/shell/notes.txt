# Langage interprété
Le shell est un langage interprété ==> instructions utilisées sont interprétées avant d'être transformées en langage machine
Dans le cas des langages compilés, les instructions sont directement transformés en instruction machine.
Langage Interprété : pas de gestion de mémoire. 
C'est à l'interpréteur de s'occuper d'allouer la mémoire nécessaire à l'exécution du programme.

# Interpreteur de lignes de commande du shell
L'interpréteur analyse les instructions ligne à ligne.
C'est un interpréteur interactif, chaque instruction est exécuter dès la fin de la ligne saisie.

# Séparateur de ligne
- mode interactif 'retour chariot'
- mode interactif, plusieurs instructions : ';'

# Séparateur de commande
- le caractère pour séparer les commandes les une des autres est l'espace " ".
- 1 + 2 ==> commnande +
- 1+2 ==> pas de commande plus mais une chaine unique

# Variable en Shell
- placer le résultat d'une instruction dans un espace mémoire et modifier ce résultat plus loin lors de l'exécution.
==> L'information contenue dans l'espace mémoire = variable.
==> Déclaration :
$ ma_variable = "ma chaîne de caractère"
==> Le shell ne distingue pas une variable vide d'une variable non définie.

# Absence de type
==> les variables sont non typées 
==> du point de vue du shell, la nature des variables == chaine de caracère
==> commande expr : faire de simples opération mathématiques
[gildas@localhost ~]$ entier=1
[gildas@localhost ~]$ entier2=2
[gildas@localhost ~]$ expr entier+entier2
entier+entier2
[gildas@localhost ~]$ expr $entier+$entier2
1+2
[gildas@localhost ~]$ expr $entier + $entier2
3

# Export de variable
Rendre disponible une variable aux scripts parent et enfant
[gildas@localhost system]$ echo 'echo $var_exported' > child-script
[gildas@localhost system]$ ls
child-script
[gildas@localhost system]$ vi child-script
[gildas@localhost system]$ var_exported="la variable est définie"
[gildas@localhost system]$ echo $var_exported
la variable est définie
[gildas@localhost system]$ bash ./child-script

[gildas@localhost system]$ export var_exported=$var_exported
[gildas@localhost system]$ bash ./child-script
la variable est définie

# Valeur
Les valeurs sont des espaces mémoires dont le contenu, à la différence des variables ne peut pas être modifié
[gildas@localhost system]$ readonly MY_VALUE=hello
[gildas@localhost system]$ echo ${MY_VALUE}
hello
[gildas@localhost system]$

# Précaution dans l'utilisation des variables
Norme : ${ma_variable}
Conseillé : "${ma_variable}"
==> les valeurs contenu dans la variable peuvent contenir le séparateur de commande " " par défaut.
==> peut entraîner un comportement non attendu, à moins que l'éxécution du script ne requiert justement que le valeurs
contenues dans la variable (ou la valeur) ne soient séparées lors du traitement
[gildas@localhost system]$ sum="1 + 2"
[gildas@localhost system]$ expr ${sum}
3
[gildas@localhost system]$ expr "${sum}"
1 + 2
==> Attention : mis entre "", la variable reste une chaine de caracètre unique.

# Tableau
Un tableau en shell est une variable contenant plusieurs valeurs
[gildas@localhost system]$ tableau[0]=1
[gildas@localhost system]$ echo ${tableau[0]}
1
[gildas@localhost system]$ tableau[1]=45
[gildas@localhost system]$ echo ${tableau[45]}

[gildas@localhost system]$ echo ${tableau[1]}
45
==> Les tableaux sont discontinues
[gildas@localhost system]$ tableau[10]=20
[gildas@localhost system]$ echo ${tableau[10]}
20
