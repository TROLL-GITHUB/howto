# RouterModule
Module permettant de gérer la navigation au sein d'un appliction angular
Mécanisme de traitement des routes même si on est sur SPA.
Toujours une seule page, mais possibilité de naviguer entre plusieurs pages : simulation de navigation car on est toujours
sur un mécanisme de composant.
route : associé un composant à un path

# Mise en place:
1- app.module.ts
import { RouterModule } from '@angular/router'

Définir les routes:
const routes: Routes = [
  {path: '', redirectTo: 'recherche', pathMatch: 'full'},
  {path: 'recherche', component: MonComposantComponent},
  {path: 'details', component: DetailsComponent}
];

Injecter le router Module en faisant référence au routes :
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule,
    RouterModule.forRoot(routes)
  ],

2- router-outlet
Question : où faire l'injection des composants.
==> on peut vouloir garder un header / footer constant
==> En général app.component.html
==> <router-outlet> : router d'angular, c'est à cet endroit que tu injectes le composant qui nous intérèsse.

# Passage de paramètres
##
# liens hypertextes
- on oublie les liens hypertextes '<a href>' qui déclenchent le rechargement de la page.
- on utilisera un router-link avec ou sans paramètres

# directives router-link
Format:
<a [routerLink]="['routePath', routeParameterValue]">{{film.title}}</a>

Process :
1- indiquer dans le router que j'attends des paramètres : il faut donc mettre à jour les routes
{path: 'details/:id', component: DetailsComponent}
2- mettre à jour le router-link
3- récupération du paramètre au niveau du contrôleur
a- nouvel import pour récupérer la route active : route surlaquelle je me trouve actuellement.
import { ActivatedRoute } from '@angular/router';
b- injection
constructor(private route: ActivatedRoute) { }
c- dans ngOnInit, récupération des paramètres de la route courante
d- route.params est un observable ; il faut y souscrire.
==> renvoie un tableau contenant les paramètres : il suffit alors de récupérer les paramètres par leur nom.



